import { getNext5DaysForecast, generateAdvice } from './predic.js';
import { FindSensors } from './firebase.js';

document.addEventListener('DOMContentLoaded', () => {
  const mapContainer = document.getElementById('mapContainer');
  const campusMap    = document.getElementById('campusMap');
  const infoBox      = document.getElementById('infoBox');

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å hotspot
  document.querySelectorAll('.hotspot').forEach(hot => {
    hot.addEventListener('click', e => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const { name, info } = hot.dataset;
      infoBox.textContent = `${name} ‡πÄ‡∏õ‡πá‡∏ô ${info}`;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏°‡∏û
      const rect   = mapContainer.getBoundingClientRect();
      const clickX = e.clientX - rect.left;
      const clickY = e.clientY - rect.top;
      campusMap.style.transformOrigin = `${clickX}px ${clickY}px`;

      // ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      campusMap.classList.add('zoomed');
      setTimeout(() => {
        campusMap.classList.remove('zoomed');
      }, 600);
    });
  });
});

function getDayLabel(dateString) {
  const days = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
  const date = new Date(dateString);
  return days[date.getDay()];
}


function formatNumber(value) {
  return typeof value === "number" ? value.toFixed(2) : "--";
}

function pickIcon(item) {
    if (!item || typeof item !== 'object') return "unknown";
  
    const temp = item.temperature ?? 0;
    const rain = item.rainChance ?? item.rainchance ?? 0; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 2 ‡πÅ‡∏ö‡∏ö
  
    // üî¥ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ù‡∏ô > ‡∏£‡πâ‡∏≠‡∏ô/‡∏´‡∏ô‡∏≤‡∏ß > ‡∏õ‡∏Å‡∏ï‡∏¥
    if (rain >= 90) return "storm";      // ‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å  
    if (rain >= 70) return "rainy";       // ‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å
    if (rain >= 40) return "cloudy";      // ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏´‡∏£‡∏∑‡∏≠‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢
    if (temp >= 35) return "hot";         // ‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î
    if (temp <= 20) return "cold";        // ‡∏´‡∏ô‡∏≤‡∏ß
    return "sunny";                       // ‡∏õ‡∏Å‡∏ï‡∏¥
  }
  
  
function startSensorSlider(intervalMs = 3000) {
const sliderItems = document.querySelectorAll('.slider-item');
if (sliderItems.length === 0) return;
  
    let currentIndex = 0;
  
    setInterval(() => {
      // ‡∏•‡∏ö active ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
      sliderItems.forEach(item => item.classList.remove('active'));
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° active ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
      currentIndex = (currentIndex + 1) % sliderItems.length;
      sliderItems[currentIndex].classList.add('active');
    }, intervalMs);
  }

export async function LoadForecast() {
  const forecastContainer = document.getElementById("forecastContainer");
  if (!forecastContainer) return;

  const data = await getNext5DaysForecast();
  forecastContainer.innerHTML = "";

  data.forEach(entry => {
    const dateKey = entry.date;
    const dayLabel = getDayLabel(dateKey);
    const item = entry.forecast;

    if (item) {
        console.log("üß™ item ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ pickIcon:", item);
        const iconName = item.icon || pickIcon(item);
        const iconSrc = `./png/${iconName}.png`;
        const advice = generateAdvice(item);
        const rainDisplay = formatNumber(item.rainChance * 10);

        forecastContainer.innerHTML += `
        <div class="forecast-item">
          <span><strong class="bold-blue">${dayLabel}</strong></span>
          <img src="${iconSrc}" alt="Weather Icon">
          <span><strong class="bold-blue">${formatNumber(item.temperature)}</strong>¬∞C</span>
          <span>
            PM2.5: <strong class="bold-blue">${formatNumber(item.pm25)}</strong> ¬µg/m¬≥
          </span>
          <span>
            ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ù‡∏ô‡∏à‡∏∞‡∏ï‡∏Å: <strong class="bold-blue">${rainDisplay}</strong>%
          </span>
          <div class="weather-advice">${advice}</div>
        </div>
`;console.log("üß™ Forecast item:", item);
    } else {
      forecastContainer.innerHTML += `
        <div class="forecast-item">
          <span>${dayLabel}</span>
          <img src="./png/unknown.png" alt="No Data">
          <span>Temp: --¬∞C</span>
          <span>PM2.5: -- ¬µg/m¬≥</span>
          <span>Rain: --%</span>
          <div class="weather-advice">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå</div>
        </div>
      `;
    }
  });
}

let tempChart = null;

function renderTemperatureChart() {
  const ctx = document.getElementById('temperatureChart').getContext('2d');

  const data = {
    labels: [],
    datasets: [{
      label: "Temperature (¬∞C)",
      borderColor: "rgba(255,99,132,1)",
      backgroundColor: "rgba(255,99,132,0.2)",
      data: [],
      tension: 0.3
    }]
  };

  tempChart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
      responsive: true,
      animation: false,
      scales: {
        x: {
          title: { display: true, text: 'Time' }
        },
        y: {
          title: { display: true, text: 'Temperature (¬∞C)' }
        }
      }
    }
  });
}

function startRealtimeTemp() {
  const realtimeRef = ref(db, "/realtime/temp");

  onValue(realtimeRef, (snapshot) => {
    const tempValue = snapshot.val();
    const timeLabel = new Date().toLocaleTimeString();

    if (tempChart) {
      const chartData = tempChart.data;
      chartData.labels.push(timeLabel);
      chartData.datasets[0].data.push(tempValue ?? 0);

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏à‡∏∏‡∏î
      if (chartData.labels.length > 20) {
        chartData.labels.shift();
        chartData.datasets[0].data.shift();
      }

      tempChart.update();
    }
  });
}

window.onload = () => {
    FindSensors();
    LoadForecast();
    renderTemperatureChart();   // ‚¨ÖÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    startRealtimeTemp();        // ‚¨ÖÔ∏è ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
    startSensorSlider();        // (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ slider)
  };