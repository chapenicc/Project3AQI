// functions/averageRTDBtoFirestore.js

const admin = require('firebase-admin');
const fetch = require('node-fetch');

// ‡πÇ‡∏´‡∏•‡∏î service account key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const serviceAccount = require('./serviceAccountKey.json');

// ‚Äî ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initializeApp ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á RTDB ‡πÅ‡∏•‡∏∞ Firestore ‚Äî
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://air-qulity-in-u-default-rtdb.asia-southeast1-firebasedatabase.app/'
});

/**
 * ‡∏î‡∏∂‡∏á rainChance (optional) 
 * ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
 */
async function fetchRainChance(retry = 1, delay = 1000) {
  const LAT = 13.85527, LON = 100.58532;
  const API_KEY = process.env.OPENWEATHER_API_KEY || 'e5d06f804986aee2b7fbef62dd81435d';
  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${LAT}&lon=${LON}&exclude=minutely,daily,alerts&appid=${API_KEY}&units=metric`;

  for (let attempt = 1; attempt <= retry; attempt++) {
    try {
      const res = await fetch(url);
      const json = await res.json();
      const pop = json.hourly?.[1]?.pop;
      if (typeof pop === 'number') {
        return Math.round(pop * 100);
      }
    } catch (e) {
      console.warn(`‚ö†Ô∏è fetchRainChance attempt ${attempt} failed:`, e.message);
    }
    await new Promise(r => setTimeout(r, delay));
  }
  return 0;
}

/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å RTDB ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
 * ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á Firestore ‡∏ó‡∏µ‡πà collection 'sensor_data' 
 * ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô rainChance ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô field ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 */
async function averageRTDBtoFirestore(dateString) {
  console.log(`üß™ START averageRTDBtoFirestore for ${dateString}`);

  // 1) ‡∏≠‡πà‡∏≤‡∏ô sensor data ‡∏à‡∏≤‡∏Å RTDB
  const rtdbRef = admin.database().ref(`records/${dateString}/sensors`);
  const snapshot = await rtdbRef.once('value');
  const sensorData = snapshot.val();
  if (!sensorData) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RTDB ‡∏ó‡∏µ‡πà path records/${dateString}/sensors`);
    return;
  }

  // 2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î map ‡∏Ç‡∏≠‡∏á field ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
  const fields = {
    CO: 'co',
    CO2: 'co2',
    NH3: 'nh3',
    PM10: 'pm10',
    pm25: 'pm2_5',
    temperature: 'temperature',
  };

  // 3) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì sum ‡πÅ‡∏•‡∏∞ count
  const sums = {}, counts = {};
  for (const key of Object.keys(fields)) {
    sums[key] = 0;
    counts[key] = 0;
  }

  for (const hourKey of Object.keys(sensorData)) {
    const reading = sensorData[hourKey];
    for (const [exportKey, sourceKey] of Object.entries(fields)) {
      const val = reading[sourceKey];
      const num = parseFloat(val);
      if (!isNaN(num)) {
        sums[exportKey] += num;
        counts[exportKey]++;
      }
    }
  }

  // 4) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average ‡πÅ‡∏•‡∏∞ build result object
  const result = { date: dateString };
  for (const key of Object.keys(fields)) {
    result[key] = counts[key] > 0
      ? parseFloat((sums[key] / counts[key]).toFixed(2))
      : null;
  }

  // 5) (Optional) ‡∏î‡∏∂‡∏á rainChance ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
  try {
    const rainChance = await fetchRainChance(2, 500);
    result.rainChance = rainChance;
  } catch (e) {
    console.warn('‚ö†Ô∏è fetchRainChance failed:', e.message);
  }

  // 6) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á Firestore
  try {
    await admin
      .firestore()
      .collection('sensor_data')
      .doc(dateString)
      .set(result, { merge: true });

    console.log('‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Firestore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);
  } catch (e) {
    console.error('‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Firestore ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', e);
  }
}

// ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ averageRTDBtoFirestore ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô
// averageRTDBtoFirestore('2025-04-22');

module.exports = averageRTDBtoFirestore;
